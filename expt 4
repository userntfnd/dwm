# load the iris dataset
from sklearn.datasets import load_iris
iris = load_iris()
  
# store the feature matrix (X) and response vector (y)
X = iris.data
y = iris.target
  
# splitting X and y into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=1)
  
# training the model on training set
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
gnb.fit(X_train, y_train)
  
# making predictions on the testing set
y_pred = gnb.predict(X_test)
  
# comparing actual response values (y_test) with predicted response values (y_pred)
from sklearn import metrics
print("Gaussian Naive Bayes model accuracy(in %):", metrics.accuracy_score(y_test, y_pred)*100)







OUTPUT
#Gaussian Naive Bayes model accuracy(in %): 95.0













code explaination 



This code does the following:

Loads the Iris dataset.
Splits the dataset into training and testing sets (60% for training and 40% for testing).
Trains a Gaussian Naive Bayes model on the training set, which learns to classify iris flowers based on their characteristics.
Uses the trained model to make predictions on the testing set.
Calculates and prints the accuracy of the model's predictions on the testing data, indicating how well the model performed as a percentage.

